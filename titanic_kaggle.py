# -*- coding: utf-8 -*-
"""Titanic_Kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kcK47A35XiPDGgixmMszSEM7vNQld2i7
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import cross_val_score
pd.set_option('display.max_rows', 1500) # 設定輸出視覺呈現行數

"""* 載入基本套件"""

titanic_tr = pd.read_csv('Titanic/train.csv')
titanic_te = pd.read_csv('Titanic/test.csv')
titanic = titanic_tr.append(titanic_te)

"""* 載入檔案"""

def Missing_Counts(Data):
  Data['Fare'] = Data['Fare'].replace(0, np.nan)
  missing = Data.isnull().sum(axis=0)  # 計算欄位中缺漏值的數量，回傳回series或(如果指定級別)
  missing = missing[missing>0] # 過濾出大於0的index
  Missing_Count = pd.DataFrame( { 'ColumnName':missing.index, 'MissingCount':missing.values } )  # 轉換Series成Df蹦設定新的index與值
  Missing_Count[ 'Percentage(%)' ] = Missing_Count['MissingCount'].apply( lambda x:round(x/Data.shape[0]*100,2) ) # 計算百分比數 (apply沿著MissingCount計算)
  return  Missing_Count
  
print('Train', Missing_Counts(titanic))

"""* 分析各項行數的缺失數值比例"""

sns.countplot(titanic['Sex'], hue=titanic['Survived'])
display()

sns.countplot(titanic['Pclass'], hue=titanic['Survived'])
display()

plt.figure(figsize = (10,20))
sns.boxplot(x='Pclass', y='Fare', hue='Survived', data=titanic, palette="Set3")
display()

"""* 根據該乘客的性別與船艙填入中位數"""

mask_has_age_p12_sur = ((titanic['Age'] > 0) & (titanic['Pclass'] != 3 ) & (titanic['Survived'] == 1))
mask_has_age_p12_dea = ((titanic['Age'] > 0) & (titanic['Pclass'] != 3 ) & (titanic['Survived'] == 0))

ax = sns.distplot(titanic.loc[mask_has_age_p12_sur, 'Age'],kde=False,bins=16,norm_hist=True,label='Survived') 
ax = sns.distplot(titanic.loc[mask_has_age_p12_dea , 'Age'],kde=False,bins=16,norm_hist=True,label='Dead')
ax.legend()
ax.set_title('Age vs Survived in Pclass = 1 and  2',fontsize = 20)

"""* 觀察到16歲以下基本上存活"""

# extracted title using name
titanic['Title'] = titanic.Name.str.extract(' ([A-Za-z]+)\.', expand=False)
titanic['Title'] = titanic['Title'].replace(['Capt', 'Col', 'Countess', 'Don',
                                               'Dr', 'Dona', 'Jonkheer', 
                                                'Major','Rev','Sir'],'Rare') 
titanic['Title'] = titanic['Title'].replace(['Mlle', 'Ms','Mme'],'Miss')
titanic['Title'] = titanic['Title'].replace(['Lady'],'Mrs')
titanic['Title'] = titanic['Title'].map({"Mr":0, "Rare" : 1, "Master" : 2,"Miss" : 3, "Mrs" : 4 })
Ti = titanic.groupby('Title')['Age'].median()


for i in range(0, 5):
  filter_title =  (titanic['Title'] == i) & (titanic['Age'].isnull())
  titanic.loc[(titanic['Title'] == i) & (titanic['Age'].isnull()) , ('Age')] = Ti[i] # loc[行, 列]，填滿對應值

titanic['Fare'] = titanic['Fare'].replace(0, np.nan)
for i in range(1, 4):
  filter_pclass = (titanic['Fare'].isnull()) & (titanic['Pclass'] == i) & (titanic['Survived'].isnull() == 0)
  Pclass_1_median = titanic[(titanic['Fare'] > 1) & (titanic['Pclass'] == i) & (titanic['Survived'].isnull() == 0)].median().loc['Fare']
  titanic[filter_pclass] = titanic[filter_pclass].fillna(Pclass_1_median)
  titanic['Fare'] = titanic['Fare'].round(3)


titanic['Fare'] = titanic['Fare'].fillna(7.5)

titanic['FareBin_5'] = pd.qcut(titanic['Fare'], 15) # Fare離散化
titanic['FareBin_5_Label'] = LabelEncoder().fit_transform(titanic['FareBin_5'])

# titanic['Age_bin_5'] = pd.qcut(titanic['Age'], 5)
# titanic['Age_bin_6'] = pd.qcut(titanic['Age'], 6)
# titanic['Age_bin_7'] = pd.qcut(titanic['Age'], 7)
# titanic['Age_bin_8'] = pd.qcut(titanic['Age'], 8)
titanic['Age_bin_9'] = pd.qcut(titanic['Age'], 9)
# titanic['Age_bin_5'] = LabelEncoder().fit_transform(titanic['Age_bin_5'])
# titanic['Age_bin_6'] = LabelEncoder().fit_transform(titanic['Age_bin_6'])
# titanic['Age_bin_7'] = LabelEncoder().fit_transform(titanic['Age_bin_7'])
# titanic['Age_bin_8'] = LabelEncoder().fit_transform(titanic['Age_bin_8'])
titanic['Age_bin_9'] = LabelEncoder().fit_transform(titanic['Age_bin_9'])

titanic

titanic['Sex'] = titanic['Sex'].map({'male':0,'female':1})

df_train = titanic[:len(titanic_tr)]
df_test = titanic[len(titanic_tr):]

#x = df_train[['Pclass', 'Age', 'Sex', 'FareBin_5_Label', 'Age_bin_5']]
#x = df_train[['Pclass', 'Age', 'Sex', 'Fare', 'Age_bin_6']]
#x = df_train[['Pclass', 'Age', 'Sex', 'FareBin_5_Label', 'Age_bin_7']]
#x = df_train[['Pclass', 'Age', 'Sex', 'FareBin_5_Label', 'Age_bin_8']]
x = df_train[['Pclass', 'Age', 'Sex', 'Age_bin_9', 'FareBin_5_Label']]
y = df_train['Survived']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=33)

X = df_test[['Pclass', 'Age', 'Sex', 'Age_bin_9', 'FareBin_5_Label']]

xgbc = XGBClassifier(n_estimators=5, learning_rate=0.05, max_depth=3)
xgbc.fit(x, y)
pred = xgbc.predict(X)


submit = pd.DataFrame({"PassengerId": df_test['PassengerId'],
                      "Survived":pred.astype(int)})
submit.to_csv("submit_XGB.csv",index=False)

clf = RandomForestClassifier(n_estimators=10, max_depth=3)
clf.fit(x, y)
pred = clf.predict(X)

submit = pd.DataFrame({"PassengerId": df_test['PassengerId'],
                      "Survived":pred.astype(int)})
submit.to_csv("submit_clf.csv",index=False)